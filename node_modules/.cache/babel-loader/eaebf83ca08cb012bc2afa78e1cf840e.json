{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","ex"],"sources":["/Users/stephaniepierce/Documents/Course_Work/week_13/Strangers_Things/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async(token) => {\n    try {\n        const response = await fetch(`${baseURL}/posts`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        const results = await response.json();\n        return results;\n    } catch(error) {\n        console.log('error getting all posts')\n    } \n}\n\nexport const registerUser = async (username, password) => {\n    try {\n        const response = await fetch(`${baseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user: {\n                    username: username,\n                    password: password\n                }\n            })\n        })\n\n        const result = await response.json();\n        return result;\n    } catch(error) {\n        console.log('error registering user')\n    }\n}\n\nexport const loginUser = async (username, password) => {\n    try {\n        const response = await fetch(`${baseURL}/users/login`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user: {\n                    username,\n                    password\n                }\n            })\n        })\n\n        const result = await response.json();\n\n        return result;\n        \n    } catch (ex) {\n        console.log('error logging in user')\n    }\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+DAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAMC,KAAN,IAAgB;EACpC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,QAAZ,EAAqB;MAC7CK,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,iBAAkB,UAASH,KAAM;MAF5B;IADoC,CAArB,CAA5B;IAMA,MAAMI,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;IACA,OAAOD,OAAP;EACH,CATD,CASE,OAAME,KAAN,EAAa;IACXC,OAAO,CAACC,GAAR,CAAY,yBAAZ;EACH;AACJ,CAbM;AAeP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EACtD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,iBAAZ,EAA8B;MACtDc,MAAM,EAAE,MAD8C;MAEtDT,OAAO,EAAE;QACL,gBAAgB;MADX,CAF6C;MAKtDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,IAAI,EAAE;UACFN,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADW,CAAf;IALgD,CAA9B,CAA5B;IAaA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IACA,OAAOY,MAAP;EACH,CAhBD,CAgBE,OAAMX,KAAN,EAAa;IACXC,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH;AACJ,CApBM;AAsBP,OAAO,MAAMU,SAAS,GAAG,OAAOR,QAAP,EAAiBC,QAAjB,KAA8B;EACnD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,cAAZ,EAA2B;MACnDc,MAAM,EAAE,MAD2C;MAEnDT,OAAO,EAAE;QACL,gBAAgB;MADX,CAF0C;MAKnDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,IAAI,EAAE;UACFN,QADE;UAEFC;QAFE;MADW,CAAf;IAL6C,CAA3B,CAA5B;IAaA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IAEA,OAAOY,MAAP;EAEH,CAlBD,CAkBE,OAAOE,EAAP,EAAW;IACTZ,OAAO,CAACC,GAAR,CAAY,uBAAZ;EACH;AACJ,CAtBM"},"metadata":{},"sourceType":"module"}