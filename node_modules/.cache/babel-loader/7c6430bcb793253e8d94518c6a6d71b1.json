{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error getting users details');\n  }\n};\nexport const createPost = async (token, _ref) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error creating a new post');\n  }\n};\nexport const updatePost = async _ref2 => {\n  let {\n    token,\n    title,\n    description,\n    price,\n    location,\n    willDeliver,\n    _id\n  } = _ref2;\n\n  try {\n    const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error updating post');\n  }\n};\nexport const deletePost = async (token, postID) => {\n  try {\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    console.log(results);\n    returm(results);\n  } catch (ex) {\n    console.log('error deleting post');\n  }\n};\nexport const createMessage = async _ref3 => {\n  let {\n    postID,\n    token,\n    message\n  } = _ref3;\n\n  try {\n    const response = await fetch(`${baseURL}/posts/${postID}/messages`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    const result = await response.json();\n  } catch (ex) {\n    console.log('error creating message');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","ex","getUserDetails","createPost","title","description","price","location","willDeliver","post","updatePost","_id","deletePost","postID","returm","createMessage","message"],"sources":["/Users/stephaniepierce/Documents/Course_Work/week_13/Strangers_Things/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async(token) => {\n    try {\n        const response = await fetch(`${baseURL}/posts`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        const results = await response.json();\n        return results;\n    } catch(error) {\n        console.log('error getting all posts')\n    } \n}\n\nexport const registerUser = async (username, password) => {\n    try {\n        const response = await fetch(`${baseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                user: {\n                    username: username,\n                    password: password\n                }\n            })\n        })\n\n        const result = await response.json();\n        return result;\n    } catch(error) {\n        console.log('error registering user')\n    }\n}\n\nexport const loginUser = async (username, password) => {\n    try {\n        const response = await fetch(`${baseURL}/users/login`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user: {\n                    username,\n                    password\n                }\n            })\n        })\n\n        const result = await response.json();\n\n        return result;\n        \n    } catch (ex) {\n        console.log('error logging in user')\n    }\n}\n\nexport const getUserDetails = async (token) => {\n    try {\n        const response = await fetch(`${baseURL}/users/me`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n        })\n\n        const result = await response.json();\n        return result;\n\n    } catch (ex) {\n        console.log('error getting users details')\n    }\n}\n\nexport const createPost = async (token, {title, description, price, location, willDeliver})=> {\n    try {\n        const response = await fetch(`${baseURL}/posts`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post: {\n                    title,\n                    description,\n                    price,\n                    location,\n                    willDeliver,\n                }\n            })\n        })\n        \n        const result = await response.json();\n        return result;\n    } catch(ex) {\n        console.log('error creating a new post')\n    }\n}\n\nexport const updatePost = async ({token, title, description, price, location, willDeliver, _id}) => {\n    try {\n        const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n            method: \"PATCH\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post: {\n                    title,\n                    description,\n                    price,\n                    location,\n                    willDeliver\n                }\n            })\n        })\n\n        const result = await response.json();\n        return result;    \n    } catch(ex) {\n        console.log('error updating post')\n    }\n}\n\nexport const deletePost = async (token, postID) => {\n    try {\n        const response = await fetch(`${baseURL}/posts/${postID}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        })\n        const results = await response.json();\n        console.log(results)\n        returm (results)\n    } catch (ex) {\n        console.log('error deleting post')\n    }\n}\n\nexport const createMessage = async ({postID, token, message}) => {\n    try {\n        const response = await fetch(`${baseURL}/posts/${postID}/messages`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                message\n            })\n        })\n        const result = await response.json();\n        \n    } catch(ex) {\n        console.log('error creating message')\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}